/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package project1.pkg2;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

/**
 *
 * @author hja23
 */
public class pictureframe extends javax.swing.JFrame {

    /**
     * Creates new form pictureframe
     */
   
    //global values that I use for this class
    File aFile;
    String outputPath;
    String grey;
    String dithering;
    int [] greyCounter = new int[256];
    
    public pictureframe() {
        
        initComponents();
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("File : ");

        jButton1.setText("open file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );

        jButton2.setText("Make the tiff file grey");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("1.open a tiff file");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("2.  greyscale");

        jLabel5.setText("Output path :");

        jButton3.setText("select path");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Histogram for greyscale");

        jLabel8.setText("0");

        jLabel9.setText("255");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("3. ordered dithering");

        jButton4.setText("2x2 512bit dithering");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("* Please select output path");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton3)))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(436, 436, 436))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9)
                                .addGap(74, 74, 74))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(39, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        // chosing the input file
        JFileChooser fc = new JFileChooser();
         int option = fc.showOpenDialog(this);
         if(option == JFileChooser.APPROVE_OPTION)
         {
             //getting a file from filechooser
             aFile = fc.getSelectedFile();
             String fileName = aFile.toString();
             jTextField1.setText(fileName);
             
             //converting file into array of byte
             FileInputStream input = null;
             
             int sizeOfFile = (int) aFile.length();
             byte[] bb = new byte[sizeOfFile];
             try
             {
                 input = new FileInputStream(aFile);
                 input.read(bb);
                 input.close();
 
                 Desktop desktop = Desktop.getDesktop();
                 desktop.open(aFile);
             }
               catch(Exception e)
             {
                 e.printStackTrace();
             }
         }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
     grey = outputPath+"\\grey.tiff";
     
      System.out.println(grey);
        //change the image into grey scale and drawing the gray schale histogram
        try
             {
               
                 int sizeOfFile = (int) aFile.length();
                  byte[] bb = new byte[sizeOfFile];
                  FileInputStream input = null;
                  input = new FileInputStream(aFile);
                  input.read(bb);
                  input.close();

                  int header = 8;
                  int dataEntryNum=2;
                  int ifd = (bb[8]+1)*12;
               

                  for(int i=header+dataEntryNum+ifd; i<bb.length-2; i+=3)
                  {
                      //getting y value
                      double y = 0.299*((int)bb[i] & 0xff) + 0.587*((int)bb[i+1] & 0xff) + 0.114*((int)bb[i+2] & 0xff);
                      int int_y= (int)y;
               
                     bb[i]= (byte) int_y;
                     bb[i+1]=(byte)int_y;
                     bb[i+2]=(byte)int_y;
                     
                     //count y and store it into an array
                         greyCounter[int_y]+=1;
                  }
                 
                 BufferedImage img = ImageIO.read(new ByteArrayInputStream(bb));
                 File outputFile = new File(grey);
                 ImageIO.write(img, "tif", outputFile);
                 Desktop desktop = Desktop.getDesktop();
                 desktop.open(outputFile); 
                 
                   //drawing the histogram
                 Graphics g = jPanel1.getGraphics();
                 g.setColor(Color.red);
                 int PanelWidth = jPanel1.getWidth();
                 int PanelHeight = jPanel1.getHeight();
                 for(int i=0; i<256; i+=1)
                 {
                     //all hegith should be less than height of panel
                     double fixingHeight = greyCounter[i]%PanelHeight;
                     int fixedHinght = (int)fixingHeight;
                     
                     g.drawLine(i*2, PanelHeight, i*2, PanelHeight-fixedHinght);
                 }
         
                 //this is using the library
                 /*
                 BufferedImage img= ImageIO.read(aFile);
                 int height = img.getHeight();
                 int width = img.getWidth();
                 for(int i=0; i<height;i++)
                 {
                     for(int j=0;j<width;j++)
                     {
                         //getting rgb
                         int color = img.getRGB(j, i);
                         int red = (color & 0xff0000) >>16;
                         int green = (color & 0xff00) >>8;
                         int blue= color & 0xff;
                         
                        
                         //getting y value
                         double y= 0.299*red + 0.587*green + 0.114*blue;
                         int int_y= (int)y;
                         System.out.println(int_y);
                         
                         //count y and store it into an array
                         greyCounter[int_y]+=1;
                         
                         //red green and blue are changed to y
                         red=int_y;
                         green=int_y;
                         blue=int_y;
                         
                         int newRGB = red;
                         newRGB = (newRGB << 8) + green;
                         newRGB = (newRGB << 8) + blue;
                  
                         img.setRGB(j, i, newRGB);
                          
                     }
                 }
                 //writing the output to outputfile
                 File outputFile = new File(grey);
                ImageIO.write(img, "tif", outputFile);
                 Desktop desktop = Desktop.getDesktop();
                 desktop.open(outputFile); 
                 
                 
                 //drawing the histogram
                 Graphics g = jPanel1.getGraphics();
                 g.setColor(Color.red);
                 int PanelWidth = jPanel1.getWidth();
                 int PanelHeight = jPanel1.getHeight();
                 for(int i=0; i<256; i+=1)
                 {
                     //all hegith should be less than height of panel
                     double fixingHeight = greyCounter[i]%PanelHeight;
                     int fixedHinght = (int)fixingHeight;
                     
                     g.drawLine(i*2, PanelHeight, i*2, PanelHeight-fixedHinght);
                 }
                 */
             }
               catch(Exception e)
             {
                 e.printStackTrace();
             }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        //choosing the directory
         JFileChooser fc = new JFileChooser();
         fc.setCurrentDirectory(new java.io.File("."));
	 fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	 fc.setApproveButtonText("select");
         int returnVal = fc.showOpenDialog(null);
          File selectedFile = fc.getSelectedFile();
          outputPath =  selectedFile.getPath();
          jTextField3.setText(outputPath);

         
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        //getting file name
        dithering = outputPath+"\\dithering.tiff";
       
        try
             {
                 
                 int sizeOfFile = (int) aFile.length();
                  byte[] bb = new byte[sizeOfFile];
                  FileInputStream input = null;
                  input = new FileInputStream(aFile);
                  input.read(bb);
                  input.close();

                  int header = 8;
                  int dataEntryNum=2;
                  int ifd = (bb[8]+1)*12;

                 
                 
                  int matrix = 5;
                  int bits = 511;
                  int dither = bits/matrix;//=51
                  
                   for(int i=header+dataEntryNum+ifd; i<bb.length-2; i+=3)
                  {
                      //getting y value
                      double y = 0.299*((int)bb[i] & 0xff) + 0.587*((int)bb[i+1] & 0xff) + 0.114*((int)bb[i+2] & 0xff);
                      int int_y= (int)y;
                      
                      if(int_y>dither)
                        {
                                bb[i]=0;
                                bb[i+1]=0;
                                bb[i+2]=0;
                        }
                        //otherwise it is white
                        else
                        {
                                bb[i]=(byte)255;
                                bb[i+1]=(byte)255;
                                bb[i+2]=(byte)255;
                      
                         }
                  }
                   BufferedImage img = ImageIO.read(new ByteArrayInputStream(bb));
                 //writing the output to outputfile
                 File outputFile = new File(dithering);
                 ImageIO.write(img, "tif", outputFile);
                 Desktop desktop = Desktop.getDesktop();
                 desktop.open(outputFile); 
                  
                 
                 /*
                 for(int i=0; i<height;i++)
                 {
                     for(int j=0;j<width;j++)
                     {

                         //getting rgb
                         int color = img.getRGB(j, i);
                         int red = (color & 0xff0000) >>16;
                         int green = (color & 0xff00) >>8;
                         int blue= color & 0xff;
                        
                         //getting y value
                         double y= 0.299*red + 0.587*green + 0.114*blue;
                         int int_y= (int)y;
                        
                        //if grey scale is bigger than dithering value, the pixel is black
                        if(int_y>dither)
                        {
                         red=0;
                         green=0;
                         blue=0;
                         
                         int newRGB = red;
                         newRGB = (newRGB << 8) + green;
                         newRGB = (newRGB << 8) + blue;
                  
                         img.setRGB(j, i, newRGB);
                            
                        }
                        //otherwise it is white
                        else
                        {
                         red=255;
                         green=255;
                         blue=255;
                         
                         int newRGB = red;
                         newRGB = (newRGB << 8) + green;
                         newRGB = (newRGB << 8) + blue;
                  
                         img.setRGB(j, i, newRGB);
                        }

                     }
                 }
                 
                 //writing the output to outputfile
                 File outputFile = new File(dithering);
                 ImageIO.write(img, "tif", outputFile);
                 Desktop desktop = Desktop.getDesktop();
                 desktop.open(outputFile); 
                */ 
             }
          catch(Exception e)
             {
                 e.printStackTrace();
             }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pictureframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pictureframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pictureframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pictureframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pictureframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
